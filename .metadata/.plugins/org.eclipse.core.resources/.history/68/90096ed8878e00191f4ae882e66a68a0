package com.core.x.web.rest;

import java.net.URI;
import java.net.URISyntaxException;
import java.text.ParseException;
import java.util.List;
import java.util.UUID;

import javax.validation.Valid;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.boot.configurationprocessor.json.JSONException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.core.x.domain.Ticket;
import com.core.x.service.TicketService;
import com.core.x.web.rest.util.HeaderUtil;
import com.core.x.web.rest.util.PaginationUtil;

import io.github.jhipster.web.util.ResponseUtil;

@RestController
@RequestMapping("/api")
public class TicketResource {

	private final Logger log = LoggerFactory.getLogger(TicketResource.class);

	private final TicketService ticketService;

	public TicketResource(TicketService ticketService) {
		this.ticketService = ticketService;
	}
	
		/**
		 * POST /tickets : create a new Ticket.
		 * <p>
		 *
		 * @param ticket the ticket to create
		 * @return the ResponseEntity with status 201 (Created) and with body the new ticket
		 * @throws URISyntaxException if the Location URI syntax is incorrect
		 */
	     @PostMapping("/tickets")
	     public ResponseEntity<Ticket> createTicket(@Valid @RequestBody Ticket ticket) throws URISyntaxException{
			log.debug("REST request to add ticket : {}", ticket);
				Ticket newTicket = ticketService.createTicket(ticket);
				// mailService.sendCreationEmail(newCustomer);
				return ResponseEntity.created(new URI("/api/ticket/" + newTicket.getStatus()))
						.headers(HeaderUtil.createAlert("ticketManagement.created", newTicket.getStatus()))
						.body(newTicket);

		}
	     
	     /**
	      * GET /tickets : get all tickets.
	      *
	      * @param pageable the pagination information
	      * @return the ResponseEntity with status 200 (OK) and with body all tickets.
	      */
	     @GetMapping("/tickets")
	     public ResponseEntity<List<Ticket>> getAllTickets(Pageable pageable) {
	         final Page<Ticket> page = ticketService.getAllCreatedTickets(pageable);
	         HttpHeaders headers = PaginationUtil.generatePaginationHttpHeaders(page, "/api/ticket");
	         return new ResponseEntity<>(page.getContent(), headers, HttpStatus.OK);
	     } 
	     
	     
	     @PutMapping("/tickets/{id}")
	     public ResponseEntity<Ticket> updateTicket(@RequestBody Ticket ticket,@PathVariable UUID id){
	    	 ticketService.updateTicket(ticket,id);
	    	 return ResponseUtil.wrapOrNotFound(
	    	            ticketService.updateTicket(ticket,id));
	     }
	     
	     
	     
	     /**
	      * GET /ticketsStatus/status : get all tickets with status.
	      *
	      * @param ticketStatus of ticket to find ticket with Status
	      * @return the ResponseEntity with status 200 (OK) and with body all tickets.
	      */
	     @GetMapping("/ticketsStatus/{ticketStatus}")
	     public ResponseEntity<List<Ticket>> getAllTicketsWithStatus(@PathVariable String ticketStatus) {
	         List<Ticket> tickets = ticketService.getAllTicketsWithStatus(ticketStatus);
	         return new ResponseEntity<>(tickets, HttpStatus.OK);
	     } 
	    

	     /**
	      * GET /tickets/status/response : get all tickets with response and with status.
	      *
	      * @param status of status to find tickets with status.
	      * @param response of ticket to find tickets with response. 
	      * @return the ResponseEntity with status 200 (OK) and with body all tickets.
	      */
	     @GetMapping("/tickets/{status}/{response}")
	     public ResponseEntity<List<Ticket>> getUnrepliedUnsolveTickets(@PathVariable String status,@PathVariable String response) {
	         List<Ticket> tickets = ticketService.getUnrepliedUnsolvedTickets(status,response);
	         return new ResponseEntity<>(tickets, HttpStatus.OK);
	     } 


	     /**
	      * GET /tickets/: get all newAndopentickets.
	      * 
	      * @return the ResponseEntity with status 200 (OK) and with body all New And Opened tickets.
	      */
	     @GetMapping("/newOpenedtickets")
	     public ResponseEntity<List<Ticket>> getAllOpenedTicket() {
	         List<Ticket> tickets = ticketService.getAllNewAndOpenedTicket();
	         return new ResponseEntity<>(tickets, HttpStatus.OK);
	     }
	     
	     
	     @GetMapping("/unsolvetickets/{ticketStatus}")
	     public ResponseEntity<String> getAllunsloveticketsByStatus(@PathVariable String ticketStatus) throws JSONException {
	         String tickets = ticketService.getAllunsloveticketsByStatus(ticketStatus);
	         return new ResponseEntity<>(tickets, HttpStatus.OK);
	     }
	     
	     
	     @GetMapping("/getAllticketsOflastSevenDays")
	     public ResponseEntity<String> getAllTicketsLastdate() throws JSONException {
	         final String page = ticketService.getAllCreatedTicketsLastSevendays();
	       //  HttpHeaders headers = PaginationUtil.generatePaginationHttpHeaders(page, "/api/ticket");
	         return new ResponseEntity<>(page, HttpStatus.OK);
	     }
	     
	     
	     @GetMapping("/getResponseTimeOflastSevenDays")
	     public ResponseEntity<String> getAllNewTicketsLastSevendays() throws JSONException {
	         final String page = ticketService.getResponseTimeLastSevendays();
	       //  HttpHeaders headers = PaginationUtil.generatePaginationHttpHeaders(page, "/api/ticket");
	         return new ResponseEntity<>(page, HttpStatus.OK);
	     }
	     
	     
	     @GetMapping("/timeSinceUpdate/{ticketstatus}")
	     public ResponseEntity<Long> timeSinceUpdate(@PathVariable String ticketStatus) {
	         Long tickets = ticketService.timeSinceUpdate(ticketStatus);
	         return new ResponseEntity<>(tickets, HttpStatus.OK);
	     } 
	    
	     /**
	      * GET /tickets/: get all newAndopentickets.
	      * 
	      * @return the ResponseEntity with status 200 (OK) and with body all New And Opened tickets.
	      */
	     @GetMapping("/unassignedtickets/{ticketStatus}/{response}")
	     public ResponseEntity<Long> getunassignTicketAge(@PathVariable String ticketStatus,@PathVariable String response) {
	         Long tickets = ticketService.unassignTicketAge(ticketStatus,response);
	         return new ResponseEntity<>(tickets, HttpStatus.OK);
	     } 
  
	     /*@GetMapping("/openedticketsOflastSevenDays")
	     public ResponseEntity< List<Ticket>> getOpenTicketLastSevenDays() {
	         List<Ticket> tickets = ticketService.getopenTicket();
	         return new ResponseEntity<>(tickets, HttpStatus.OK);
	     }*/
	      
	     
	     @GetMapping("/ticketsResolution/{ticketStatus}")
	     public ResponseEntity<String> getTicketByFullRsolutionTime(@PathVariable String ticketStatus) throws ParseException, JSONException {
	    	String tickets = ticketService.ticketByFullRsolutionTime(ticketStatus);
	    	 return new ResponseEntity<>(tickets,HttpStatus.OK);
	     }
	     
	     @GetMapping("/ticketsDayofWeek/{ticketStatus}")
	     public ResponseEntity<String> getCreateTicketsDayOfWeek(@PathVariable String ticketStatus) throws ParseException, JSONException {
	    	 String tickets = ticketService.CreateTicketsDayOfWeek(ticketStatus);
	    	 return new ResponseEntity<>(tickets,HttpStatus.OK);
	     }
	     
	     /**
	      * GET /tickets/: get all onetouchTicket.
	      * 
	      * @return the ResponseEntity with status 200 (OK) and with body all New And Opened tickets.
	      */
	     @GetMapping("/onetouchTicket")
	     public ResponseEntity<String> getOnetouchTicket() throws JSONException{
	    	 String onetouchTicket=ticketService.getOnetouchTicket();
	    	 return new ResponseEntity<>(onetouchTicket,HttpStatus.OK);
	     }
	     
	     
	     /**
	      * GET /tickets/reopenedTicket: get all ReopenedTicket.
	      * 
	      * @return the ResponseEntity with status 200 (OK) and with body all reopenedTicket.
	      */
	     @GetMapping("/tickets/reopenedTicket")
         public ResponseEntity<String> getReopendTicket() throws JSONException{
	    	 String reOpened=ticketService.getReopendTicket();
	    	 return new ResponseEntity<>(reOpened,HttpStatus.OK);
	     }
	     
	     }
