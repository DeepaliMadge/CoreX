package com.core.x.service;

//import java.io.FileOutputStream;
import java.io.IOException;
import java.time.Instant;
import java.util.Date;
import java.util.Optional;
import java.util.UUID;

import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;
import org.springframework.web.multipart.MultipartFile;

import com.amazonaws.services.codecommit.model.File;
import com.core.x.domain.Image;
import com.core.x.domain.User;
import com.core.x.repository.ImageRepository;
import com.core.x.repository.UserRepository;
import com.core.x.security.SecurityUtils;
import com.core.x.service.dto.UserDTO;
import com.core.x.web.rest.ImageResource;

@Service
public class ImageService {

	private final ImageRepository imageRepository;
	
	private final UserRepository userRepository;

	public ImageService(ImageRepository imageRepository,UserRepository userRepository) {
		this.imageRepository = imageRepository;
		this.userRepository=userRepository;
	}

	
	public Image uploadImage(MultipartFile file) throws IOException {
		UserDTO user=new UserDTO();
		Image image=new Image();
		String fileName = StringUtils.cleanPath(file.getOriginalFilename());
		Optional<User> user1=userRepository.findOneByLogin(SecurityUtils.getCurrentUserLogin().get());
		      user.setId(user1.get().getId());
		      user.setActivated(user1.get().getActivated());
		      user.setCreatedDate(user1.get().getCreatedDate());
	          user.setLastModifiedDate(user1.get().getLastModifiedDate());
	         image.getUser().add(user);
	         image.setFileName(fileName);
	         image.setFileType(file.getContentType());
	         image.setPath(file.getBytes());
		 return imageRepository.save(image);
	}
	
	public Image updateImage(UUID id,MultipartFile file) throws IOException {
		Optional<Image> image=imageRepository.findById(id);
		image.get().setPath(file.getBytes());
		return imageRepository.save(image.get());
	}
	
	
	 public void deleteImage(UUID id) {
	        imageRepository.findById(id).ifPresent(image -> {
	            imageRepository.delete(image);            
	        });
	    }
	 
	  public Optional<Image> getFile(UUID fileId) {
	        return imageRepository.findById(fileId);
	             
	    }
}
